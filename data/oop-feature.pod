
=encoding utf-8

=head1 QUESTION

Perlのオブジェクト指向プログラミング (OOP) 機能について、以下の選択肢から正しいものを選んでください。

=head1 CHOICES

=over

=item 1.

PerlのOOP機能は貧弱であり、コンストラクタもデストラクタも組み込みでは存在しない。

=item 2.

Perlでは、以下のように組み込み関数 C<has()> によってプロパティを宣言できる。このとき、アクセサも生成される。

    has foo => (
        is      => 'rw',
        isa     => 'Int',
        default => 42,
    );

=item 3.

Perlでは多重継承が可能であるが、下記に示すような2つ以上の基底クラスが更に共通の基底クラスを持つ形になる継承、いわゆる「ダイヤモンド継承」は許可されておらず、そのようなケースではエラーになる。

    # ダイヤモンド継承
    use 5.14.0;
    package A { }
    package B {
        use base qw(A);
    }
    package C {
        use base qw(A);
    }
    package D {
        use base qw(B C); # エラー！
    }

=item 4.

Perlのメソッドの実体はただのサブルーチンであり、サブルーチンをメソッドとして呼び出すと最初の引数にクラスまたはオブジェクトが渡されるだけである。つまり以下の２つの文a, bは同じ意味である。

    Foo::bar('Foo', 42); # (a)
    Foo->bar(42); # (b)

=item 5.

Perlのオブジェクトの実体はなんでもよく、組み込み関数 C<bless()> によってスカラーやハッシュ、配列など任意のデータ型のリファレンスをオブジェクトにする事ができる。

=back

=head1 ANSWER

5

=head1 EXPLANATION

5番が正解です。ほとんどのケースではハッシュリファレンスをblessしてオブジェクトを作りますが、実際には型グロブやサブルーチンなど任意のデータ型のリファレンスをblessすることができます。

以下、誤った選択肢について解説します。

=over

=item 1

Perlには組み込みのコンストラクタは存在しませんが、DESTROYという名前のサブルーチンを定義するとデストラクタとして振る舞います。

=item 2

組み込み関数の C<has()> は存在しません。MooseやMouseなどのOOPサポートモジュールなどが C<has()> を提供しています。

=item 3

Perlでは多重継承が許可されているのは正しいのですが、ダイヤモンド継承を禁止したりはしていません。ただダイヤモンド継承を行うとメソッドの検索順序で問題が起きることがあります。ダイヤモンド継承時におけるメソッド解決順序については L<mro|http://perldoc.jp/docs/modules/mro-1.00/mro.pod> プラグマも参考にしてください。

=item 4

C<< Foo::bar('Foo', 42) >> と C<< Foo->bar(42) >> は等価ではありません。後者はFooにメソッドが見つからないときに基底クラスへメソッドを検索しにいきますが、前者はメソッド呼び出しではないため継承とは関係なく動作します。

=back

=head1 SEE ALSO

L<perlboot|http://perldoc.jp/docs/perl/5.10.0/perlboot.pod>

=head1 AUTHOR

Fuji Goro
http://github.com/gfx

=cut
